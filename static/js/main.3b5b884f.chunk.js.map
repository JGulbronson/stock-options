{"version":3,"sources":["App.tsx","index.tsx"],"names":["useStyles","makeStyles","root","display","flexWrap","graph","flexGrow","controls","width","marginTop","lineChart","marginLeft","marginRight","dummyData","name","GRAPH_COLORS","App","bars","classes","useState","numberOfOptions","setNumberOfOptions","strikePrice","setStrikePrice","startMonth","setStartMonth","preferredPrice","setPreferredPrice","grants","setGrants","data","grant","month","value","existingData","find","it","ordinal","push","length","map","index","dataKey","fill","isAnimationActive","stackId","Container","fixed","className","height","formatter","Intl","NumberFormat","format","interval","type","Box","m","TextField","label","onChange","e","target","Button","color","variant","onClick","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3b5b884f.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { Box, Button, Container, TextField } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Bar, BarChart, Tooltip, XAxis, YAxis } from \"recharts\";\nimport { start } from \"repl\";\n\nconst useStyles = makeStyles({\n  root: {\n    display: \"flex\",\n    flexWrap: \"wrap\",\n  },\n  graph: {\n    flexGrow: 1,\n  },\n  controls: {\n    width: 200,\n    marginTop: 20,\n  },\n  lineChart: {\n    marginLeft: \"auto\",\n    marginRight: \"auto\",\n  },\n});\n\ntype Grant = {\n  ordinal: string;\n  numberOfOptions: number;\n  strikePrice: number;\n  startMonth: number;\n};\n\nconst dummyData = [\n  {\n    name: \"1\",\n    [\"0\"]: 0,\n  },\n  {\n    name: \"1\",\n    [\"1\"]: 1,\n  },\n];\n\nconst GRAPH_COLORS = [\"#4D342F\", \"#E4521B\", \"#d5c755\"];\n\nconst App = () => {\n  const classes = useStyles();\n\n  const [numberOfOptions, setNumberOfOptions] = useState(100);\n  const [strikePrice, setStrikePrice] = useState(1);\n  const [startMonth, setStartMonth] = useState(0);\n  const [preferredPrice, setPreferredPrice] = useState(1);\n\n  const [grants, setGrants] = useState<Array<Grant>>([]);\n\n  const data = [];\n  for (let grant of grants) {\n    for (let month = grant.startMonth + 1; month <= 8 * 12; month++) {\n      let value: number;\n      if (month < 12 + grant.startMonth) {\n        value = 0;\n      } else if (month > 48 + grant.startMonth) {\n        value = grant.numberOfOptions * preferredPrice;\n      } else {\n        value =\n          ((grant.numberOfOptions * preferredPrice) / 48) *\n          (month - grant.startMonth);\n      }\n      const existingData = data.find((it) => it.name === month);\n      if (existingData) {\n        existingData[grant.ordinal] = value;\n      } else {\n        data.push({\n          name: month,\n          [grant.ordinal]: value,\n        });\n      }\n    }\n  }\n\n  let bars;\n  if (grants.length > 0) {\n    bars = grants.map((grant, index) => {\n      return (\n        <Bar\n          dataKey={grant.ordinal}\n          fill={GRAPH_COLORS[index % GRAPH_COLORS.length]}\n          isAnimationActive={false}\n          stackId={1}\n        />\n      );\n    });\n  } else {\n    bars = (\n      <Bar dataKey={\"1\"} fill=\"#8884d8\" isAnimationActive={false} stackId={1} />\n    );\n  }\n\n  return (\n    <Container fixed className={classes.root}>\n      <div className={classes.graph}>\n        <BarChart\n          width={900}\n          height={450}\n          data={data.length > 0 ? data : dummyData}\n          className={classes.lineChart}\n        >\n          <Tooltip\n            formatter={(value) => new Intl.NumberFormat(\"en\").format(+value)}\n          />\n          {bars}\n          <XAxis dataKey=\"name\" interval={3} />\n          <YAxis type=\"number\" width={100} />\n        </BarChart>\n      </div>\n      <Box className={classes.controls}>\n        <Box m={2}>\n          <TextField\n            label=\"Number of Options\"\n            type=\"number\"\n            value={numberOfOptions}\n            onChange={(e) => {\n              setNumberOfOptions(+e.target.value);\n            }}\n          />\n        </Box>\n        <Box m={2}>\n          <TextField\n            label=\"Strike Price\"\n            type=\"number\"\n            value={strikePrice}\n            onChange={(e) => {\n              setStrikePrice(+e.target.value);\n            }}\n          />\n        </Box>\n        <Box m={2}>\n          <TextField\n            label=\"Start Month\"\n            type=\"number\"\n            value={startMonth}\n            onChange={(e) => {\n              setStartMonth(+e.target.value);\n            }}\n          />\n        </Box>\n        <Box m={2}>\n          <Button\n            color={\"primary\"}\n            variant={\"contained\"}\n            onClick={() =>\n              setGrants([\n                ...grants,\n                {\n                  ordinal: `Grant ${grants.length + 1}`,\n                  strikePrice: strikePrice,\n                  numberOfOptions: numberOfOptions,\n                  startMonth: startMonth,\n                },\n              ])\n            }\n          >\n            Add grant\n          </Button>\n        </Box>\n      </Box>\n      <Box>\n        <TextField\n          label=\"Preferred Price\"\n          type=\"number\"\n          value={preferredPrice}\n          onChange={(e) => {\n            setPreferredPrice(+e.target.value);\n          }}\n        />\n      </Box>\n    </Container>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}